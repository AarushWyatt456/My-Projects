package com.pj;

import java.io.*;
import java.util.*;

class Student {
    private String id;
    private String name;
    private Map<String, Integer> subjects;

    public Student(String id, String name, Map<String, Integer> subjects) {
        this.id = id;
        this.name = name;
        this.subjects = new HashMap<>(subjects);
    }

    public String getId() { return id; }
    public String getName() { return name; }
    public Map<String, Integer> getSubjects() { return new HashMap<>(subjects); }

    public int getTotalMarks() {
        int total = 0;
        for (int mark : subjects.values()) {
            total += mark;
        }
        return total;
    }

    public double getAverageMarks() {
        if (subjects.isEmpty()) return 0;
        return (double) getTotalMarks() / subjects.size();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("ID: ").append(id).append("\n");
        sb.append("Name: ").append(name).append("\n");
        sb.append("Subjects:\n");
        for (Map.Entry<String, Integer> entry : subjects.entrySet()) {
            sb.append("  ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }
        sb.append("Total: ").append(getTotalMarks()).append("\n");
        sb.append("Average: ").append(String.format("%.2f", getAverageMarks())).append("\n");
        return sb.toString();
    }
}

public class StudentManager {
    private static List<Student> students = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);
    private static final String FILE_NAME = "students.txt";

    public static void main(String[] args) {
        loadStudents();
        
        while (true) {
            System.out.println("\nStudent Management System");
            System.out.println("1. Add Student");
            System.out.println("2. View All Students");
            System.out.println("3. Search Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Save and Exit");
            System.out.print("Choose option: ");
            
            int choice;
            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Please enter a number 1-5");
                continue;
            }

            switch (choice) {
                case 1: addStudent(); break;
                case 2: viewAllStudents(); break;
                case 3: searchStudent(); break;
                case 4: deleteStudent(); break;
                case 5: saveStudents(); return;
                default: System.out.println("Invalid choice");
            }
        }
    }

    private static void addStudent() {
        System.out.print("Enter student ID: ");
        String id = scanner.nextLine().trim();
        
        // Check if ID already exists
        for (Student s : students) {
            if (s.getId().equalsIgnoreCase(id)) {
                System.out.println("Student ID already exists");
                return;
            }
        }
        
        System.out.print("Enter student name: ");
        String name = scanner.nextLine().trim();
        
        Map<String, Integer> subjects = new HashMap<>();
        System.out.println("Enter subjects and marks (type 'done' when finished):");
        
        while (true) {
            System.out.print("Subject name: ");
            String subject = scanner.nextLine().trim();
            if (subject.equalsIgnoreCase("done")) break;
            if (subject.isEmpty()) {
                System.out.println("Subject name cannot be empty");
                continue;
            }
            
            System.out.print("Mark (0-100): ");
            try {
                int mark = Integer.parseInt(scanner.nextLine());
                if (mark < 0 || mark > 100) {
                    System.out.println("Mark must be 0-100");
                    continue;
                }
                subjects.put(subject, mark);
            } catch (NumberFormatException e) {
                System.out.println("Please enter a number");
            }
        }
        
        if (subjects.isEmpty()) {
            System.out.println("Student must have at least one subject");
            return;
        }
        
        students.add(new Student(id, name, subjects));
        System.out.println("Student added successfully");
    }

    private static void viewAllStudents() {
        if (students.isEmpty()) {
            System.out.println("No students in the system");
            return;
        }
        
        System.out.println("\nAll Students:");
        for (Student s : students) {
            System.out.println(s);
            System.out.println("-----------");
        }
    }

    private static void searchStudent() {
        System.out.print("Enter student ID or name to search: ");
        String query = scanner.nextLine().trim().toLowerCase();
        
        List<Student> results = new ArrayList<>();
        for (Student s : students) {
            if (s.getId().toLowerCase().contains(query) || 
                s.getName().toLowerCase().contains(query)) {
                results.add(s);
            }
        }
        
        if (results.isEmpty()) {
            System.out.println("No matching students found");
        } else {
            System.out.println("\nFound " + results.size() + " student(s):");
            for (Student s : results) {
                System.out.println(s);
            }
        }
    }

    private static void deleteStudent() {
        System.out.print("Enter student ID to delete: ");
        String id = scanner.nextLine().trim();
        
        Iterator<Student> iterator = students.iterator();
        while (iterator.hasNext()) {
            Student s = iterator.next();
            if (s.getId().equalsIgnoreCase(id)) {
                iterator.remove();
                System.out.println("Student deleted successfully");
                return;
            }
        }
        
        System.out.println("Student not found");
    }

    private static void saveStudents() {
        ensureDataFile();
        try (PrintWriter writer = new PrintWriter(new FileWriter(FILE_NAME))) {
            for (Student s : students) {
                writer.println(s.getId() + "," + s.getName());
                for (Map.Entry<String, Integer> entry : s.getSubjects().entrySet()) {
                    writer.println(entry.getKey() + "," + entry.getValue());
                }
                writer.println("---");
            }
            System.out.println("Data saved successfully");
        } catch (IOException e) {
            System.out.println("Error saving data: " + e.getMessage());
        }
    }

    private static void loadStudents() {
        ensureDataFile();
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            String id = null, name = null;
            Map<String, Integer> subjects = new HashMap<>();
            
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (line.equals("---")) {
                    if (id != null && name != null && !subjects.isEmpty()) {
                        students.add(new Student(id, name, subjects));
                        subjects = new HashMap<>();
                        id = null;
                        name = null;
                    }
                    continue;
                }
                
                String[] parts = line.split(",");
                if (parts.length == 2) {
                    if (id == null) {
                        id = parts[0].trim();
                        name = parts[1].trim();
                    } else {
                        try {
                            subjects.put(parts[0].trim(), Integer.parseInt(parts[1].trim()));
                        } catch (NumberFormatException e) {
                            System.out.println("Error reading mark for " + parts[0]);
                        }
                    }
                }
            }
            System.out.println("Loaded " + students.size() + " students");
        } catch (FileNotFoundException e) {
            System.out.println("No existing data file found - starting fresh");
        } catch (IOException e) {
            System.out.println("Error loading data: " + e.getMessage());
        }
    }

    private static void ensureDataFile() {
        File file = new File(FILE_NAME);
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                System.out.println("Could not create data file: " + e.getMessage());
            }
        }
    }
}
